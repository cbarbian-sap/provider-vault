/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type SecretBackendRootSignIntermediateInitParameters struct {

	// List of alternative names.
	AltNames []*string `json:"altNames,omitempty" tf:"alt_names,omitempty"`

	// The PKI secret backend the resource belongs to.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// CN of intermediate to create.
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// The country.
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// The CSR.
	Csr *string `json:"csr,omitempty" tf:"csr,omitempty"`

	// Flag to exclude CN from SANs.
	ExcludeCnFromSans *bool `json:"excludeCnFromSans,omitempty" tf:"exclude_cn_from_sans,omitempty"`

	// List of domains for which certificates are not allowed to be issued.
	ExcludedDNSDomains []*string `json:"excludedDnsDomains,omitempty" tf:"excluded_dns_domains,omitempty"`

	// List of email addresses for which certificates are not allowed to be issued.
	ExcludedEmailAddresses []*string `json:"excludedEmailAddresses,omitempty" tf:"excluded_email_addresses,omitempty"`

	// List of IP ranges for which certificates are NOT allowed to be issued.
	ExcludedIPRanges []*string `json:"excludedIpRanges,omitempty" tf:"excluded_ip_ranges,omitempty"`

	// List of URI domains for which certificates are not allowed to be issued.
	ExcludedURIDomains []*string `json:"excludedUriDomains,omitempty" tf:"excluded_uri_domains,omitempty"`

	// The format of data.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// List of alternative IPs.
	IPSans []*string `json:"ipSans,omitempty" tf:"ip_sans,omitempty"`

	// Specifies the default issuer of this request.
	IssuerRef *string `json:"issuerRef,omitempty" tf:"issuer_ref,omitempty"`

	// Specify the key usages to be added to the existing set of key usages ("CRL", "CertSign") on the generated certificate.
	KeyUsage []*string `json:"keyUsage,omitempty" tf:"key_usage,omitempty"`

	// The locality.
	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	// The maximum path length to encode in the generated certificate.
	MaxPathLength *float64 `json:"maxPathLength,omitempty" tf:"max_path_length,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.
	NotAfter *string `json:"notAfter,omitempty" tf:"not_after,omitempty"`

	// Specifies the duration by which to backdate the NotBefore property.
	NotBeforeDuration *string `json:"notBeforeDuration,omitempty" tf:"not_before_duration,omitempty"`

	// The organization.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// List of other SANs.
	OtherSans []*string `json:"otherSans,omitempty" tf:"other_sans,omitempty"`

	// The organization unit.
	Ou *string `json:"ou,omitempty" tf:"ou,omitempty"`

	// List of domains for which certificates are allowed to be issued.
	PermittedDNSDomains []*string `json:"permittedDnsDomains,omitempty" tf:"permitted_dns_domains,omitempty"`

	// List of email addresses for which certificates are allowed to be issued.
	PermittedEmailAddresses []*string `json:"permittedEmailAddresses,omitempty" tf:"permitted_email_addresses,omitempty"`

	// List of IP ranges for which certificates are allowed to be issued.
	PermittedIPRanges []*string `json:"permittedIpRanges,omitempty" tf:"permitted_ip_ranges,omitempty"`

	// List of URI domains for which certificates are allowed to be issued.
	PermittedURIDomains []*string `json:"permittedUriDomains,omitempty" tf:"permitted_uri_domains,omitempty"`

	// The postal code.
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The province.
	Province *string `json:"province,omitempty" tf:"province,omitempty"`

	// Revoke the certificate upon resource destruction.
	Revoke *bool `json:"revoke,omitempty" tf:"revoke,omitempty"`

	// The number of bits to use in the signature algorithm.
	SignatureBits *float64 `json:"signatureBits,omitempty" tf:"signature_bits,omitempty"`

	// Value for the Subject Key Identifier field
	// (RFC 5280 Section 4.2.1.2). Specified as a string in hex format.
	Skid *string `json:"skid,omitempty" tf:"skid,omitempty"`

	// The street address.
	StreetAddress *string `json:"streetAddress,omitempty" tf:"street_address,omitempty"`

	// Time to live.
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// List of alternative URIs.
	URISans []*string `json:"uriSans,omitempty" tf:"uri_sans,omitempty"`

	// Preserve CSR values.
	UseCsrValues *bool `json:"useCsrValues,omitempty" tf:"use_csr_values,omitempty"`

	// Specifies whether or not to use PSS signatures
	// over PKCS#1v1.5 signatures when a RSA-type issuer is used.
	UsePss *bool `json:"usePss,omitempty" tf:"use_pss,omitempty"`
}

type SecretBackendRootSignIntermediateObservation struct {

	// List of alternative names.
	AltNames []*string `json:"altNames,omitempty" tf:"alt_names,omitempty"`

	// The PKI secret backend the resource belongs to.
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// The CA chain as a list of format specific certificates
	CAChain []*string `json:"caChain,omitempty" tf:"ca_chain,omitempty"`

	// The signed intermediate CA certificate.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// The concatenation of the intermediate and issuing CA certificates (PEM encoded). Requires the format to be set to any of: pem, pem_bundle. The value will be empty for all other formats.
	CertificateBundle *string `json:"certificateBundle,omitempty" tf:"certificate_bundle,omitempty"`

	// CN of intermediate to create.
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// The country.
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// The CSR.
	Csr *string `json:"csr,omitempty" tf:"csr,omitempty"`

	// Flag to exclude CN from SANs.
	ExcludeCnFromSans *bool `json:"excludeCnFromSans,omitempty" tf:"exclude_cn_from_sans,omitempty"`

	// List of domains for which certificates are not allowed to be issued.
	ExcludedDNSDomains []*string `json:"excludedDnsDomains,omitempty" tf:"excluded_dns_domains,omitempty"`

	// List of email addresses for which certificates are not allowed to be issued.
	ExcludedEmailAddresses []*string `json:"excludedEmailAddresses,omitempty" tf:"excluded_email_addresses,omitempty"`

	// List of IP ranges for which certificates are NOT allowed to be issued.
	ExcludedIPRanges []*string `json:"excludedIpRanges,omitempty" tf:"excluded_ip_ranges,omitempty"`

	// List of URI domains for which certificates are not allowed to be issued.
	ExcludedURIDomains []*string `json:"excludedUriDomains,omitempty" tf:"excluded_uri_domains,omitempty"`

	// The format of data.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of alternative IPs.
	IPSans []*string `json:"ipSans,omitempty" tf:"ip_sans,omitempty"`

	// Specifies the default issuer of this request.
	IssuerRef *string `json:"issuerRef,omitempty" tf:"issuer_ref,omitempty"`

	// The issuing CA certificate.
	IssuingCA *string `json:"issuingCa,omitempty" tf:"issuing_ca,omitempty"`

	// Specify the key usages to be added to the existing set of key usages ("CRL", "CertSign") on the generated certificate.
	KeyUsage []*string `json:"keyUsage,omitempty" tf:"key_usage,omitempty"`

	// The locality.
	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	// The maximum path length to encode in the generated certificate.
	MaxPathLength *float64 `json:"maxPathLength,omitempty" tf:"max_path_length,omitempty"`

	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.
	NotAfter *string `json:"notAfter,omitempty" tf:"not_after,omitempty"`

	// Specifies the duration by which to backdate the NotBefore property.
	NotBeforeDuration *string `json:"notBeforeDuration,omitempty" tf:"not_before_duration,omitempty"`

	// The organization.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// List of other SANs.
	OtherSans []*string `json:"otherSans,omitempty" tf:"other_sans,omitempty"`

	// The organization unit.
	Ou *string `json:"ou,omitempty" tf:"ou,omitempty"`

	// List of domains for which certificates are allowed to be issued.
	PermittedDNSDomains []*string `json:"permittedDnsDomains,omitempty" tf:"permitted_dns_domains,omitempty"`

	// List of email addresses for which certificates are allowed to be issued.
	PermittedEmailAddresses []*string `json:"permittedEmailAddresses,omitempty" tf:"permitted_email_addresses,omitempty"`

	// List of IP ranges for which certificates are allowed to be issued.
	PermittedIPRanges []*string `json:"permittedIpRanges,omitempty" tf:"permitted_ip_ranges,omitempty"`

	// List of URI domains for which certificates are allowed to be issued.
	PermittedURIDomains []*string `json:"permittedUriDomains,omitempty" tf:"permitted_uri_domains,omitempty"`

	// The postal code.
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The province.
	Province *string `json:"province,omitempty" tf:"province,omitempty"`

	// Revoke the certificate upon resource destruction.
	Revoke *bool `json:"revoke,omitempty" tf:"revoke,omitempty"`

	// The certificate's serial number, hex formatted.
	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	// The number of bits to use in the signature algorithm.
	SignatureBits *float64 `json:"signatureBits,omitempty" tf:"signature_bits,omitempty"`

	// Value for the Subject Key Identifier field
	// (RFC 5280 Section 4.2.1.2). Specified as a string in hex format.
	Skid *string `json:"skid,omitempty" tf:"skid,omitempty"`

	// The street address.
	StreetAddress *string `json:"streetAddress,omitempty" tf:"street_address,omitempty"`

	// Time to live.
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// List of alternative URIs.
	URISans []*string `json:"uriSans,omitempty" tf:"uri_sans,omitempty"`

	// Preserve CSR values.
	UseCsrValues *bool `json:"useCsrValues,omitempty" tf:"use_csr_values,omitempty"`

	// Specifies whether or not to use PSS signatures
	// over PKCS#1v1.5 signatures when a RSA-type issuer is used.
	UsePss *bool `json:"usePss,omitempty" tf:"use_pss,omitempty"`
}

type SecretBackendRootSignIntermediateParameters struct {

	// List of alternative names.
	// +kubebuilder:validation:Optional
	AltNames []*string `json:"altNames,omitempty" tf:"alt_names,omitempty"`

	// The PKI secret backend the resource belongs to.
	// +kubebuilder:validation:Optional
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// CN of intermediate to create.
	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// The country.
	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// The CSR.
	// +kubebuilder:validation:Optional
	Csr *string `json:"csr,omitempty" tf:"csr,omitempty"`

	// Flag to exclude CN from SANs.
	// +kubebuilder:validation:Optional
	ExcludeCnFromSans *bool `json:"excludeCnFromSans,omitempty" tf:"exclude_cn_from_sans,omitempty"`

	// List of domains for which certificates are not allowed to be issued.
	// +kubebuilder:validation:Optional
	ExcludedDNSDomains []*string `json:"excludedDnsDomains,omitempty" tf:"excluded_dns_domains,omitempty"`

	// List of email addresses for which certificates are not allowed to be issued.
	// +kubebuilder:validation:Optional
	ExcludedEmailAddresses []*string `json:"excludedEmailAddresses,omitempty" tf:"excluded_email_addresses,omitempty"`

	// List of IP ranges for which certificates are NOT allowed to be issued.
	// +kubebuilder:validation:Optional
	ExcludedIPRanges []*string `json:"excludedIpRanges,omitempty" tf:"excluded_ip_ranges,omitempty"`

	// List of URI domains for which certificates are not allowed to be issued.
	// +kubebuilder:validation:Optional
	ExcludedURIDomains []*string `json:"excludedUriDomains,omitempty" tf:"excluded_uri_domains,omitempty"`

	// The format of data.
	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// List of alternative IPs.
	// +kubebuilder:validation:Optional
	IPSans []*string `json:"ipSans,omitempty" tf:"ip_sans,omitempty"`

	// Specifies the default issuer of this request.
	// +kubebuilder:validation:Optional
	IssuerRef *string `json:"issuerRef,omitempty" tf:"issuer_ref,omitempty"`

	// Specify the key usages to be added to the existing set of key usages ("CRL", "CertSign") on the generated certificate.
	// +kubebuilder:validation:Optional
	KeyUsage []*string `json:"keyUsage,omitempty" tf:"key_usage,omitempty"`

	// The locality.
	// +kubebuilder:validation:Optional
	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	// The maximum path length to encode in the generated certificate.
	// +kubebuilder:validation:Optional
	MaxPathLength *float64 `json:"maxPathLength,omitempty" tf:"max_path_length,omitempty"`

	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Set the Not After field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ. Supports the Y10K end date for IEEE 802.1AR-2018 standard devices, 9999-12-31T23:59:59Z.
	// +kubebuilder:validation:Optional
	NotAfter *string `json:"notAfter,omitempty" tf:"not_after,omitempty"`

	// Specifies the duration by which to backdate the NotBefore property.
	// +kubebuilder:validation:Optional
	NotBeforeDuration *string `json:"notBeforeDuration,omitempty" tf:"not_before_duration,omitempty"`

	// The organization.
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// List of other SANs.
	// +kubebuilder:validation:Optional
	OtherSans []*string `json:"otherSans,omitempty" tf:"other_sans,omitempty"`

	// The organization unit.
	// +kubebuilder:validation:Optional
	Ou *string `json:"ou,omitempty" tf:"ou,omitempty"`

	// List of domains for which certificates are allowed to be issued.
	// +kubebuilder:validation:Optional
	PermittedDNSDomains []*string `json:"permittedDnsDomains,omitempty" tf:"permitted_dns_domains,omitempty"`

	// List of email addresses for which certificates are allowed to be issued.
	// +kubebuilder:validation:Optional
	PermittedEmailAddresses []*string `json:"permittedEmailAddresses,omitempty" tf:"permitted_email_addresses,omitempty"`

	// List of IP ranges for which certificates are allowed to be issued.
	// +kubebuilder:validation:Optional
	PermittedIPRanges []*string `json:"permittedIpRanges,omitempty" tf:"permitted_ip_ranges,omitempty"`

	// List of URI domains for which certificates are allowed to be issued.
	// +kubebuilder:validation:Optional
	PermittedURIDomains []*string `json:"permittedUriDomains,omitempty" tf:"permitted_uri_domains,omitempty"`

	// The postal code.
	// +kubebuilder:validation:Optional
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The province.
	// +kubebuilder:validation:Optional
	Province *string `json:"province,omitempty" tf:"province,omitempty"`

	// Revoke the certificate upon resource destruction.
	// +kubebuilder:validation:Optional
	Revoke *bool `json:"revoke,omitempty" tf:"revoke,omitempty"`

	// The number of bits to use in the signature algorithm.
	// +kubebuilder:validation:Optional
	SignatureBits *float64 `json:"signatureBits,omitempty" tf:"signature_bits,omitempty"`

	// Value for the Subject Key Identifier field
	// (RFC 5280 Section 4.2.1.2). Specified as a string in hex format.
	// +kubebuilder:validation:Optional
	Skid *string `json:"skid,omitempty" tf:"skid,omitempty"`

	// The street address.
	// +kubebuilder:validation:Optional
	StreetAddress *string `json:"streetAddress,omitempty" tf:"street_address,omitempty"`

	// Time to live.
	// +kubebuilder:validation:Optional
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// List of alternative URIs.
	// +kubebuilder:validation:Optional
	URISans []*string `json:"uriSans,omitempty" tf:"uri_sans,omitempty"`

	// Preserve CSR values.
	// +kubebuilder:validation:Optional
	UseCsrValues *bool `json:"useCsrValues,omitempty" tf:"use_csr_values,omitempty"`

	// Specifies whether or not to use PSS signatures
	// over PKCS#1v1.5 signatures when a RSA-type issuer is used.
	// +kubebuilder:validation:Optional
	UsePss *bool `json:"usePss,omitempty" tf:"use_pss,omitempty"`
}

// SecretBackendRootSignIntermediateSpec defines the desired state of SecretBackendRootSignIntermediate
type SecretBackendRootSignIntermediateSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            SecretBackendRootSignIntermediateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretBackendRootSignIntermediateInitParameters `json:"initProvider,omitempty"`
}

// SecretBackendRootSignIntermediateStatus defines the observed state of SecretBackendRootSignIntermediate.
type SecretBackendRootSignIntermediateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendRootSignIntermediateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretBackendRootSignIntermediate is the Schema for the SecretBackendRootSignIntermediates API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,vault}
type SecretBackendRootSignIntermediate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backend) || (has(self.initProvider) && has(self.initProvider.backend))",message="spec.forProvider.backend is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.commonName) || (has(self.initProvider) && has(self.initProvider.commonName))",message="spec.forProvider.commonName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.csr) || (has(self.initProvider) && has(self.initProvider.csr))",message="spec.forProvider.csr is a required parameter"
	Spec   SecretBackendRootSignIntermediateSpec   `json:"spec"`
	Status SecretBackendRootSignIntermediateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendRootSignIntermediateList contains a list of SecretBackendRootSignIntermediates
type SecretBackendRootSignIntermediateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackendRootSignIntermediate `json:"items"`
}

// Repository type metadata.
var (
	SecretBackendRootSignIntermediate_Kind             = "SecretBackendRootSignIntermediate"
	SecretBackendRootSignIntermediate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackendRootSignIntermediate_Kind}.String()
	SecretBackendRootSignIntermediate_KindAPIVersion   = SecretBackendRootSignIntermediate_Kind + "." + CRDGroupVersion.String()
	SecretBackendRootSignIntermediate_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackendRootSignIntermediate_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackendRootSignIntermediate{}, &SecretBackendRootSignIntermediateList{})
}
