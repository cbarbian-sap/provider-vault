/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type SecretBackendInitParameters struct {

	// The AWS Access Key ID this backend should use to
	// issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
	// The AWS Access Key ID to use when generating new credentials.
	AccessKeySecretRef *v1.LocalSecretKeySelector `json:"accessKeySecretRef,omitempty" tf:"-"`

	// Set of managed key registry entry names that the mount in question is allowed to access
	// List of managed key registry entry names that the mount in question is allowed to access
	// +listType=set
	AllowedManagedKeys []*string `json:"allowedManagedKeys,omitempty" tf:"allowed_managed_keys,omitempty"`

	// List of headers to allow, allowing a plugin to include
	// them in the response.
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders []*string `json:"allowedResponseHeaders,omitempty" tf:"allowed_response_headers,omitempty"`

	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHMACRequestKeys []*string `json:"auditNonHmacRequestKeys,omitempty" tf:"audit_non_hmac_request_keys,omitempty"`

	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHMACResponseKeys []*string `json:"auditNonHmacResponseKeys,omitempty" tf:"audit_non_hmac_response_keys,omitempty"`

	// Default lease duration for tokens and secrets in seconds
	// Default lease duration for secrets in seconds
	DefaultLeaseTTLSeconds *float64 `json:"defaultLeaseTtlSeconds,omitempty" tf:"default_lease_ttl_seconds,omitempty"`

	// List of allowed authentication mount accessors the
	// backend can request delegated authentication for.
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors []*string `json:"delegatedAuthAccessors,omitempty" tf:"delegated_auth_accessors,omitempty"`

	// Human-friendly description of the mount
	// Human-friendly description of the mount for the backend.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// Stops rotation of the root credential until set to false.
	DisableAutomatedRotation *bool `json:"disableAutomatedRotation,omitempty" tf:"disable_automated_rotation,omitempty"`

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	DisableRemount *bool `json:"disableRemount,omitempty" tf:"disable_remount,omitempty"`

	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess *bool `json:"externalEntropyAccess,omitempty" tf:"external_entropy_access,omitempty"`

	// If set to true, disables caching.
	ForceNoCache *bool `json:"forceNoCache,omitempty" tf:"force_no_cache,omitempty"`

	// Specifies a custom HTTP IAM endpoint to use.
	// Specifies a custom HTTP IAM endpoint to use.
	IAMEndpoint *string `json:"iamEndpoint,omitempty" tf:"iam_endpoint,omitempty"`

	// The audience claim value. Requires Vault 1.16+.
	// The audience claim value.
	IdentityTokenAudience *string `json:"identityTokenAudience,omitempty" tf:"identity_token_audience,omitempty"`

	// The key to use for signing plugin workload identity tokens. If
	// not provided, this will default to Vault's OIDC default key. Requires Vault Enterprise 1.16+.
	// The key to use for signing identity tokens.
	IdentityTokenKey *string `json:"identityTokenKey,omitempty" tf:"identity_token_key,omitempty"`

	// The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
	// The TTL of generated identity tokens in seconds.
	IdentityTokenTTL *float64 `json:"identityTokenTtl,omitempty" tf:"identity_token_ttl,omitempty"`

	// Specifies whether to show this mount in the UI-specific
	// listing endpoint. Valid values are unauth or hidden. If not set, behaves like hidden.
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility *string `json:"listingVisibility,omitempty" tf:"listing_visibility,omitempty"`

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Specifies if the secret backend is local only
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// Maximum possible lease duration for tokens and secrets in seconds
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTTLSeconds *float64 `json:"maxLeaseTtlSeconds,omitempty" tf:"max_lease_ttl_seconds,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies mount type specific options that are passed to the backend
	// Specifies mount type specific options that are passed to the backend
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// List of headers to allow and pass from the request to
	// the plugin.
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders []*string `json:"passthroughRequestHeaders,omitempty" tf:"passthrough_request_headers,omitempty"`

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to aws.
	// Path to mount the backend at.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies the semantic version of the plugin to use, e.g. "v1.0.0".
	// If unspecified, the server will select any matching unversioned plugin that may have been
	// registered, the latest versioned plugin registered, or a built-in plugin in that order of precedence.
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion *string `json:"pluginVersion,omitempty" tf:"plugin_version,omitempty"`

	// The AWS region for API calls. Defaults to us-east-1.
	// The AWS region to make API calls against. Defaults to us-east-1.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
	// Role ARN to assume for plugin identity token federation.
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// The schedule, in cron-style time format,
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
	RotationSchedule *string `json:"rotationSchedule,omitempty" tf:"rotation_schedule,omitempty"`

	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is 3600. Requires Vault Enterprise 1.19+.
	// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
	RotationWindow *float64 `json:"rotationWindow,omitempty" tf:"rotation_window,omitempty"`

	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `json:"sealWrap,omitempty" tf:"seal_wrap,omitempty"`

	// The AWS Secret Key this backend should use to
	// issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
	// The AWS Secret Access Key to use when generating new credentials.
	SecretKeySecretRef *v1.LocalSecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// Specifies a custom HTTP STS endpoint to use.
	// Specifies a custom HTTP STS endpoint to use.
	StsEndpoint *string `json:"stsEndpoint,omitempty" tf:"sts_endpoint,omitempty"`

	// Ordered list of sts_endpoints to try if the defined one fails. Requires Vault 1.19+
	// Specifies a list of custom STS fallback endpoints to use (in order).
	StsFallbackEndpoints []*string `json:"stsFallbackEndpoints,omitempty" tf:"sts_fallback_endpoints,omitempty"`

	// Ordered list of sts_regions matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
	// Specifies a list of custom STS fallback regions to use (in order).
	StsFallbackRegions []*string `json:"stsFallbackRegions,omitempty" tf:"sts_fallback_regions,omitempty"`

	// Specifies the region of the STS endpoint. Should be included if sts_endpoint is supplied. Requires Vault 1.19+
	// Specifies a custom STS region to use.
	StsRegion *string `json:"stsRegion,omitempty" tf:"sts_region,omitempty"`

	// Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type SecretBackendObservation struct {

	// Accessor of the mount
	Accessor *string `json:"accessor,omitempty" tf:"accessor,omitempty"`

	// Set of managed key registry entry names that the mount in question is allowed to access
	// List of managed key registry entry names that the mount in question is allowed to access
	// +listType=set
	AllowedManagedKeys []*string `json:"allowedManagedKeys,omitempty" tf:"allowed_managed_keys,omitempty"`

	// List of headers to allow, allowing a plugin to include
	// them in the response.
	// List of headers to allow and pass from the request to the plugin
	AllowedResponseHeaders []*string `json:"allowedResponseHeaders,omitempty" tf:"allowed_response_headers,omitempty"`

	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	AuditNonHMACRequestKeys []*string `json:"auditNonHmacRequestKeys,omitempty" tf:"audit_non_hmac_request_keys,omitempty"`

	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	AuditNonHMACResponseKeys []*string `json:"auditNonHmacResponseKeys,omitempty" tf:"audit_non_hmac_response_keys,omitempty"`

	// Default lease duration for tokens and secrets in seconds
	// Default lease duration for secrets in seconds
	DefaultLeaseTTLSeconds *float64 `json:"defaultLeaseTtlSeconds,omitempty" tf:"default_lease_ttl_seconds,omitempty"`

	// List of allowed authentication mount accessors the
	// backend can request delegated authentication for.
	// List of headers to allow and pass from the request to the plugin
	DelegatedAuthAccessors []*string `json:"delegatedAuthAccessors,omitempty" tf:"delegated_auth_accessors,omitempty"`

	// Human-friendly description of the mount
	// Human-friendly description of the mount for the backend.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// Stops rotation of the root credential until set to false.
	DisableAutomatedRotation *bool `json:"disableAutomatedRotation,omitempty" tf:"disable_automated_rotation,omitempty"`

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	DisableRemount *bool `json:"disableRemount,omitempty" tf:"disable_remount,omitempty"`

	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	// Enable the secrets engine to access Vault's external entropy source
	ExternalEntropyAccess *bool `json:"externalEntropyAccess,omitempty" tf:"external_entropy_access,omitempty"`

	// If set to true, disables caching.
	ForceNoCache *bool `json:"forceNoCache,omitempty" tf:"force_no_cache,omitempty"`

	// Specifies a custom HTTP IAM endpoint to use.
	// Specifies a custom HTTP IAM endpoint to use.
	IAMEndpoint *string `json:"iamEndpoint,omitempty" tf:"iam_endpoint,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The audience claim value. Requires Vault 1.16+.
	// The audience claim value.
	IdentityTokenAudience *string `json:"identityTokenAudience,omitempty" tf:"identity_token_audience,omitempty"`

	// The key to use for signing plugin workload identity tokens. If
	// not provided, this will default to Vault's OIDC default key. Requires Vault Enterprise 1.16+.
	// The key to use for signing identity tokens.
	IdentityTokenKey *string `json:"identityTokenKey,omitempty" tf:"identity_token_key,omitempty"`

	// The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
	// The TTL of generated identity tokens in seconds.
	IdentityTokenTTL *float64 `json:"identityTokenTtl,omitempty" tf:"identity_token_ttl,omitempty"`

	// Specifies whether to show this mount in the UI-specific
	// listing endpoint. Valid values are unauth or hidden. If not set, behaves like hidden.
	// Specifies whether to show this mount in the UI-specific listing endpoint
	ListingVisibility *string `json:"listingVisibility,omitempty" tf:"listing_visibility,omitempty"`

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Specifies if the secret backend is local only
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// Maximum possible lease duration for tokens and secrets in seconds
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTTLSeconds *float64 `json:"maxLeaseTtlSeconds,omitempty" tf:"max_lease_ttl_seconds,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies mount type specific options that are passed to the backend
	// Specifies mount type specific options that are passed to the backend
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// List of headers to allow and pass from the request to
	// the plugin.
	// List of headers to allow and pass from the request to the plugin
	PassthroughRequestHeaders []*string `json:"passthroughRequestHeaders,omitempty" tf:"passthrough_request_headers,omitempty"`

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to aws.
	// Path to mount the backend at.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies the semantic version of the plugin to use, e.g. "v1.0.0".
	// If unspecified, the server will select any matching unversioned plugin that may have been
	// registered, the latest versioned plugin registered, or a built-in plugin in that order of precedence.
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	PluginVersion *string `json:"pluginVersion,omitempty" tf:"plugin_version,omitempty"`

	// The AWS region for API calls. Defaults to us-east-1.
	// The AWS region to make API calls against. Defaults to us-east-1.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
	// Role ARN to assume for plugin identity token federation.
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// The schedule, in cron-style time format,
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
	RotationSchedule *string `json:"rotationSchedule,omitempty" tf:"rotation_schedule,omitempty"`

	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is 3600. Requires Vault Enterprise 1.19+.
	// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
	RotationWindow *float64 `json:"rotationWindow,omitempty" tf:"rotation_window,omitempty"`

	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	SealWrap *bool `json:"sealWrap,omitempty" tf:"seal_wrap,omitempty"`

	// Specifies a custom HTTP STS endpoint to use.
	// Specifies a custom HTTP STS endpoint to use.
	StsEndpoint *string `json:"stsEndpoint,omitempty" tf:"sts_endpoint,omitempty"`

	// Ordered list of sts_endpoints to try if the defined one fails. Requires Vault 1.19+
	// Specifies a list of custom STS fallback endpoints to use (in order).
	StsFallbackEndpoints []*string `json:"stsFallbackEndpoints,omitempty" tf:"sts_fallback_endpoints,omitempty"`

	// Ordered list of sts_regions matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
	// Specifies a list of custom STS fallback regions to use (in order).
	StsFallbackRegions []*string `json:"stsFallbackRegions,omitempty" tf:"sts_fallback_regions,omitempty"`

	// Specifies the region of the STS endpoint. Should be included if sts_endpoint is supplied. Requires Vault 1.19+
	// Specifies a custom STS region to use.
	StsRegion *string `json:"stsRegion,omitempty" tf:"sts_region,omitempty"`

	// Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
	// Template describing how dynamic usernames are generated.
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

type SecretBackendParameters struct {

	// The AWS Access Key ID this backend should use to
	// issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
	// The AWS Access Key ID to use when generating new credentials.
	// +kubebuilder:validation:Optional
	AccessKeySecretRef *v1.LocalSecretKeySelector `json:"accessKeySecretRef,omitempty" tf:"-"`

	// Set of managed key registry entry names that the mount in question is allowed to access
	// List of managed key registry entry names that the mount in question is allowed to access
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowedManagedKeys []*string `json:"allowedManagedKeys,omitempty" tf:"allowed_managed_keys,omitempty"`

	// List of headers to allow, allowing a plugin to include
	// them in the response.
	// List of headers to allow and pass from the request to the plugin
	// +kubebuilder:validation:Optional
	AllowedResponseHeaders []*string `json:"allowedResponseHeaders,omitempty" tf:"allowed_response_headers,omitempty"`

	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
	// +kubebuilder:validation:Optional
	AuditNonHMACRequestKeys []*string `json:"auditNonHmacRequestKeys,omitempty" tf:"audit_non_hmac_request_keys,omitempty"`

	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	// Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
	// +kubebuilder:validation:Optional
	AuditNonHMACResponseKeys []*string `json:"auditNonHmacResponseKeys,omitempty" tf:"audit_non_hmac_response_keys,omitempty"`

	// Default lease duration for tokens and secrets in seconds
	// Default lease duration for secrets in seconds
	// +kubebuilder:validation:Optional
	DefaultLeaseTTLSeconds *float64 `json:"defaultLeaseTtlSeconds,omitempty" tf:"default_lease_ttl_seconds,omitempty"`

	// List of allowed authentication mount accessors the
	// backend can request delegated authentication for.
	// List of headers to allow and pass from the request to the plugin
	// +kubebuilder:validation:Optional
	DelegatedAuthAccessors []*string `json:"delegatedAuthAccessors,omitempty" tf:"delegated_auth_accessors,omitempty"`

	// Human-friendly description of the mount
	// Human-friendly description of the mount for the backend.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// Stops rotation of the root credential until set to false.
	// +kubebuilder:validation:Optional
	DisableAutomatedRotation *bool `json:"disableAutomatedRotation,omitempty" tf:"disable_automated_rotation,omitempty"`

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	// +kubebuilder:validation:Optional
	DisableRemount *bool `json:"disableRemount,omitempty" tf:"disable_remount,omitempty"`

	// Boolean flag that can be explicitly set to true to enable the secrets engine to access Vault's external entropy source
	// Enable the secrets engine to access Vault's external entropy source
	// +kubebuilder:validation:Optional
	ExternalEntropyAccess *bool `json:"externalEntropyAccess,omitempty" tf:"external_entropy_access,omitempty"`

	// If set to true, disables caching.
	// +kubebuilder:validation:Optional
	ForceNoCache *bool `json:"forceNoCache,omitempty" tf:"force_no_cache,omitempty"`

	// Specifies a custom HTTP IAM endpoint to use.
	// Specifies a custom HTTP IAM endpoint to use.
	// +kubebuilder:validation:Optional
	IAMEndpoint *string `json:"iamEndpoint,omitempty" tf:"iam_endpoint,omitempty"`

	// The audience claim value. Requires Vault 1.16+.
	// The audience claim value.
	// +kubebuilder:validation:Optional
	IdentityTokenAudience *string `json:"identityTokenAudience,omitempty" tf:"identity_token_audience,omitempty"`

	// The key to use for signing plugin workload identity tokens. If
	// not provided, this will default to Vault's OIDC default key. Requires Vault Enterprise 1.16+.
	// The key to use for signing identity tokens.
	// +kubebuilder:validation:Optional
	IdentityTokenKey *string `json:"identityTokenKey,omitempty" tf:"identity_token_key,omitempty"`

	// The TTL of generated identity tokens in seconds. Requires Vault 1.16+.
	// The TTL of generated identity tokens in seconds.
	// +kubebuilder:validation:Optional
	IdentityTokenTTL *float64 `json:"identityTokenTtl,omitempty" tf:"identity_token_ttl,omitempty"`

	// Specifies whether to show this mount in the UI-specific
	// listing endpoint. Valid values are unauth or hidden. If not set, behaves like hidden.
	// Specifies whether to show this mount in the UI-specific listing endpoint
	// +kubebuilder:validation:Optional
	ListingVisibility *string `json:"listingVisibility,omitempty" tf:"listing_visibility,omitempty"`

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Specifies if the secret backend is local only
	// +kubebuilder:validation:Optional
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// Maximum possible lease duration for tokens and secrets in seconds
	// Maximum possible lease duration for secrets in seconds
	// +kubebuilder:validation:Optional
	MaxLeaseTTLSeconds *float64 `json:"maxLeaseTtlSeconds,omitempty" tf:"max_lease_ttl_seconds,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies mount type specific options that are passed to the backend
	// Specifies mount type specific options that are passed to the backend
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Options map[string]*string `json:"options,omitempty" tf:"options,omitempty"`

	// List of headers to allow and pass from the request to
	// the plugin.
	// List of headers to allow and pass from the request to the plugin
	// +kubebuilder:validation:Optional
	PassthroughRequestHeaders []*string `json:"passthroughRequestHeaders,omitempty" tf:"passthrough_request_headers,omitempty"`

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to aws.
	// Path to mount the backend at.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies the semantic version of the plugin to use, e.g. "v1.0.0".
	// If unspecified, the server will select any matching unversioned plugin that may have been
	// registered, the latest versioned plugin registered, or a built-in plugin in that order of precedence.
	// Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
	// +kubebuilder:validation:Optional
	PluginVersion *string `json:"pluginVersion,omitempty" tf:"plugin_version,omitempty"`

	// The AWS region for API calls. Defaults to us-east-1.
	// The AWS region to make API calls against. Defaults to us-east-1.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Role ARN to assume for plugin identity token federation. Requires Vault 1.16+.
	// Role ARN to assume for plugin identity token federation.
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
	// +kubebuilder:validation:Optional
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// The schedule, in cron-style time format,
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+.
	// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
	// +kubebuilder:validation:Optional
	RotationSchedule *string `json:"rotationSchedule,omitempty" tf:"rotation_schedule,omitempty"`

	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is 3600. Requires Vault Enterprise 1.19+.
	// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
	// +kubebuilder:validation:Optional
	RotationWindow *float64 `json:"rotationWindow,omitempty" tf:"rotation_window,omitempty"`

	// Boolean flag that can be explicitly set to true to enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	// Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
	// +kubebuilder:validation:Optional
	SealWrap *bool `json:"sealWrap,omitempty" tf:"seal_wrap,omitempty"`

	// The AWS Secret Key this backend should use to
	// issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials.
	// The AWS Secret Access Key to use when generating new credentials.
	// +kubebuilder:validation:Optional
	SecretKeySecretRef *v1.LocalSecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// Specifies a custom HTTP STS endpoint to use.
	// Specifies a custom HTTP STS endpoint to use.
	// +kubebuilder:validation:Optional
	StsEndpoint *string `json:"stsEndpoint,omitempty" tf:"sts_endpoint,omitempty"`

	// Ordered list of sts_endpoints to try if the defined one fails. Requires Vault 1.19+
	// Specifies a list of custom STS fallback endpoints to use (in order).
	// +kubebuilder:validation:Optional
	StsFallbackEndpoints []*string `json:"stsFallbackEndpoints,omitempty" tf:"sts_fallback_endpoints,omitempty"`

	// Ordered list of sts_regions matching the fallback endpoints. Should correspond in order with those endpoints. Requires Vault 1.19+
	// Specifies a list of custom STS fallback regions to use (in order).
	// +kubebuilder:validation:Optional
	StsFallbackRegions []*string `json:"stsFallbackRegions,omitempty" tf:"sts_fallback_regions,omitempty"`

	// Specifies the region of the STS endpoint. Should be included if sts_endpoint is supplied. Requires Vault 1.19+
	// Specifies a custom STS region to use.
	// +kubebuilder:validation:Optional
	StsRegion *string `json:"stsRegion,omitempty" tf:"sts_region,omitempty"`

	// Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template:
	// Template describing how dynamic usernames are generated.
	// +kubebuilder:validation:Optional
	UsernameTemplate *string `json:"usernameTemplate,omitempty" tf:"username_template,omitempty"`
}

// SecretBackendSpec defines the desired state of SecretBackend
type SecretBackendSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            SecretBackendParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretBackendInitParameters `json:"initProvider,omitempty"`
}

// SecretBackendStatus defines the observed state of SecretBackend.
type SecretBackendStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretBackend is the Schema for the SecretBackends API. Creates an AWS secret backend for Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,vault}
type SecretBackend struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecretBackendSpec   `json:"spec"`
	Status            SecretBackendStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendList contains a list of SecretBackends
type SecretBackendList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackend `json:"items"`
}

// Repository type metadata.
var (
	SecretBackend_Kind             = "SecretBackend"
	SecretBackend_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackend_Kind}.String()
	SecretBackend_KindAPIVersion   = SecretBackend_Kind + "." + CRDGroupVersion.String()
	SecretBackend_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackend_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackend{}, &SecretBackendList{})
}
