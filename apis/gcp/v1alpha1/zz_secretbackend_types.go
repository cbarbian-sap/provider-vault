/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretBackendInitParameters struct {

	// The GCP service account credentials in JSON format.
	// JSON-encoded credentials to use to connect to GCP
	CredentialsSecretRef *v1.SecretKeySelector `json:"credentialsSecretRef,omitempty" tf:"-"`

	// The GCP service account credentials in JSON format. Can be updated.
	// Note: This property is write-only and will not be read from the API.
	// Write-only JSON-encoded credentials to use to connect to GCP
	CredentialsWoSecretRef *v1.SecretKeySelector `json:"credentialsWoSecretRef,omitempty" tf:"-"`

	// The version of the credentials_wo. For more info see updating write-only attributes.
	// Version counter for write-only JSON-encoded credentials
	CredentialsWoVersion *float64 `json:"credentialsWoVersion,omitempty" tf:"credentials_wo_version,omitempty"`

	// The default TTL for credentials
	// issued by this backend. Defaults to '0'.
	// Default lease duration for secrets in seconds
	DefaultLeaseTTLSeconds *float64 `json:"defaultLeaseTtlSeconds,omitempty" tf:"default_lease_ttl_seconds,omitempty"`

	// A human-friendly description for this backend.
	// Human-friendly description of the mount for the backend.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// Available only for Vault Enterprise.
	// Stops rotation of the root credential until set to false.
	DisableAutomatedRotation *bool `json:"disableAutomatedRotation,omitempty" tf:"disable_automated_rotation,omitempty"`

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	DisableRemount *bool `json:"disableRemount,omitempty" tf:"disable_remount,omitempty"`

	// The audience claim value for plugin identity
	// tokens. Must match an allowed audience configured for the target Workload Identity Pool.
	// Mutually exclusive with credentials.  Requires Vault 1.17+. Available only for Vault Enterprise.
	// The audience claim value for plugin identity tokens.
	IdentityTokenAudience *string `json:"identityTokenAudience,omitempty" tf:"identity_token_audience,omitempty"`

	// The key to use for signing plugin identity
	// tokens. Requires Vault 1.17+. Available only for Vault Enterprise.
	// The key to use for signing identity tokens.
	IdentityTokenKey *string `json:"identityTokenKey,omitempty" tf:"identity_token_key,omitempty"`

	// The TTL of generated tokens. Defaults to
	// 1 hour. Uses duration format strings.
	// Requires Vault 1.17+. Available only for Vault Enterprise.
	// The TTL of generated tokens.
	IdentityTokenTTL *float64 `json:"identityTokenTtl,omitempty" tf:"identity_token_ttl,omitempty"`

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// The maximum TTL that can be requested
	// for credentials issued by this backend. Defaults to '0'.
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTTLSeconds *float64 `json:"maxLeaseTtlSeconds,omitempty" tf:"max_lease_ttl_seconds,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to gcp.
	// Path to mount the backend at.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// Available only for Vault Enterprise.
	// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// The schedule, in cron-style time format,
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+. Available only for Vault Enterprise.
	// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
	RotationSchedule *string `json:"rotationSchedule,omitempty" tf:"rotation_schedule,omitempty"`

	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is 3600. Requires Vault Enterprise 1.19+. Available only for Vault Enterprise.
	// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
	RotationWindow *float64 `json:"rotationWindow,omitempty" tf:"rotation_window,omitempty"`

	// â€“  Service Account to impersonate for plugin workload identity federation.
	// Required with identity_token_audience. Requires Vault 1.17+. Available only for Vault Enterprise.
	// Service Account to impersonate for plugin workload identity federation.
	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email,omitempty"`
}

type SecretBackendObservation struct {

	// The accessor of the created GCP mount.
	// Accessor of the created GCP mount.
	Accessor *string `json:"accessor,omitempty" tf:"accessor,omitempty"`

	// The version of the credentials_wo. For more info see updating write-only attributes.
	// Version counter for write-only JSON-encoded credentials
	CredentialsWoVersion *float64 `json:"credentialsWoVersion,omitempty" tf:"credentials_wo_version,omitempty"`

	// The default TTL for credentials
	// issued by this backend. Defaults to '0'.
	// Default lease duration for secrets in seconds
	DefaultLeaseTTLSeconds *float64 `json:"defaultLeaseTtlSeconds,omitempty" tf:"default_lease_ttl_seconds,omitempty"`

	// A human-friendly description for this backend.
	// Human-friendly description of the mount for the backend.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// Available only for Vault Enterprise.
	// Stops rotation of the root credential until set to false.
	DisableAutomatedRotation *bool `json:"disableAutomatedRotation,omitempty" tf:"disable_automated_rotation,omitempty"`

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	DisableRemount *bool `json:"disableRemount,omitempty" tf:"disable_remount,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The audience claim value for plugin identity
	// tokens. Must match an allowed audience configured for the target Workload Identity Pool.
	// Mutually exclusive with credentials.  Requires Vault 1.17+. Available only for Vault Enterprise.
	// The audience claim value for plugin identity tokens.
	IdentityTokenAudience *string `json:"identityTokenAudience,omitempty" tf:"identity_token_audience,omitempty"`

	// The key to use for signing plugin identity
	// tokens. Requires Vault 1.17+. Available only for Vault Enterprise.
	// The key to use for signing identity tokens.
	IdentityTokenKey *string `json:"identityTokenKey,omitempty" tf:"identity_token_key,omitempty"`

	// The TTL of generated tokens. Defaults to
	// 1 hour. Uses duration format strings.
	// Requires Vault 1.17+. Available only for Vault Enterprise.
	// The TTL of generated tokens.
	IdentityTokenTTL *float64 `json:"identityTokenTtl,omitempty" tf:"identity_token_ttl,omitempty"`

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// The maximum TTL that can be requested
	// for credentials issued by this backend. Defaults to '0'.
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTTLSeconds *float64 `json:"maxLeaseTtlSeconds,omitempty" tf:"max_lease_ttl_seconds,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to gcp.
	// Path to mount the backend at.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// Available only for Vault Enterprise.
	// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// The schedule, in cron-style time format,
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+. Available only for Vault Enterprise.
	// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
	RotationSchedule *string `json:"rotationSchedule,omitempty" tf:"rotation_schedule,omitempty"`

	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is 3600. Requires Vault Enterprise 1.19+. Available only for Vault Enterprise.
	// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
	RotationWindow *float64 `json:"rotationWindow,omitempty" tf:"rotation_window,omitempty"`

	// â€“  Service Account to impersonate for plugin workload identity federation.
	// Required with identity_token_audience. Requires Vault 1.17+. Available only for Vault Enterprise.
	// Service Account to impersonate for plugin workload identity federation.
	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email,omitempty"`
}

type SecretBackendParameters struct {

	// The GCP service account credentials in JSON format.
	// JSON-encoded credentials to use to connect to GCP
	// +kubebuilder:validation:Optional
	CredentialsSecretRef *v1.SecretKeySelector `json:"credentialsSecretRef,omitempty" tf:"-"`

	// The GCP service account credentials in JSON format. Can be updated.
	// Note: This property is write-only and will not be read from the API.
	// Write-only JSON-encoded credentials to use to connect to GCP
	// +kubebuilder:validation:Optional
	CredentialsWoSecretRef *v1.SecretKeySelector `json:"credentialsWoSecretRef,omitempty" tf:"-"`

	// The version of the credentials_wo. For more info see updating write-only attributes.
	// Version counter for write-only JSON-encoded credentials
	// +kubebuilder:validation:Optional
	CredentialsWoVersion *float64 `json:"credentialsWoVersion,omitempty" tf:"credentials_wo_version,omitempty"`

	// The default TTL for credentials
	// issued by this backend. Defaults to '0'.
	// Default lease duration for secrets in seconds
	// +kubebuilder:validation:Optional
	DefaultLeaseTTLSeconds *float64 `json:"defaultLeaseTtlSeconds,omitempty" tf:"default_lease_ttl_seconds,omitempty"`

	// A human-friendly description for this backend.
	// Human-friendly description of the mount for the backend.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Cancels all upcoming rotations of the root credential until unset. Requires Vault Enterprise 1.19+.
	// Available only for Vault Enterprise.
	// Stops rotation of the root credential until set to false.
	// +kubebuilder:validation:Optional
	DisableAutomatedRotation *bool `json:"disableAutomatedRotation,omitempty" tf:"disable_automated_rotation,omitempty"`

	// If set, opts out of mount migration on path updates.
	// See here for more info on Mount Migration
	// If set, opts out of mount migration on path updates.
	// +kubebuilder:validation:Optional
	DisableRemount *bool `json:"disableRemount,omitempty" tf:"disable_remount,omitempty"`

	// The audience claim value for plugin identity
	// tokens. Must match an allowed audience configured for the target Workload Identity Pool.
	// Mutually exclusive with credentials.  Requires Vault 1.17+. Available only for Vault Enterprise.
	// The audience claim value for plugin identity tokens.
	// +kubebuilder:validation:Optional
	IdentityTokenAudience *string `json:"identityTokenAudience,omitempty" tf:"identity_token_audience,omitempty"`

	// The key to use for signing plugin identity
	// tokens. Requires Vault 1.17+. Available only for Vault Enterprise.
	// The key to use for signing identity tokens.
	// +kubebuilder:validation:Optional
	IdentityTokenKey *string `json:"identityTokenKey,omitempty" tf:"identity_token_key,omitempty"`

	// The TTL of generated tokens. Defaults to
	// 1 hour. Uses duration format strings.
	// Requires Vault 1.17+. Available only for Vault Enterprise.
	// The TTL of generated tokens.
	// +kubebuilder:validation:Optional
	IdentityTokenTTL *float64 `json:"identityTokenTtl,omitempty" tf:"identity_token_ttl,omitempty"`

	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	// Local mount flag that can be explicitly set to true to enforce local mount in HA environment
	// +kubebuilder:validation:Optional
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// The maximum TTL that can be requested
	// for credentials issued by this backend. Defaults to '0'.
	// Maximum possible lease duration for secrets in seconds
	// +kubebuilder:validation:Optional
	MaxLeaseTTLSeconds *float64 `json:"maxLeaseTtlSeconds,omitempty" tf:"max_lease_ttl_seconds,omitempty"`

	// The namespace to provision the resource in.
	// The value should not contain leading or trailing forward slashes.
	// The namespace is always relative to the provider's configured namespace.
	// Available only for Vault Enterprise.
	// Target namespace. (requires Enterprise)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The unique path this backend should be mounted at. Must
	// not begin or end with a /. Defaults to gcp.
	// Path to mount the backend at.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The amount of time in seconds Vault should wait before rotating the root credential.
	// A zero value tells Vault not to rotate the root credential. The minimum rotation period is 10 seconds. Requires Vault Enterprise 1.19+.
	// Available only for Vault Enterprise.
	// The period of time in seconds between each rotation of the root credential. Cannot be used with rotation_schedule.
	// +kubebuilder:validation:Optional
	RotationPeriod *float64 `json:"rotationPeriod,omitempty" tf:"rotation_period,omitempty"`

	// The schedule, in cron-style time format,
	// defining the schedule on which Vault should rotate the root token. Requires Vault Enterprise 1.19+. Available only for Vault Enterprise.
	// The cron-style schedule for the root credential to be rotated on. Cannot be used with rotation_period.
	// +kubebuilder:validation:Optional
	RotationSchedule *string `json:"rotationSchedule,omitempty" tf:"rotation_schedule,omitempty"`

	// The maximum amount of time in seconds allowed to complete
	// a rotation when a scheduled token rotation occurs. The default rotation window is
	// unbound and the minimum allowable window is 3600. Requires Vault Enterprise 1.19+. Available only for Vault Enterprise.
	// The maximum amount of time in seconds Vault is allowed to complete a rotation once a scheduled rotation is triggered. Can only be used with rotation_schedule.
	// +kubebuilder:validation:Optional
	RotationWindow *float64 `json:"rotationWindow,omitempty" tf:"rotation_window,omitempty"`

	// â€“  Service Account to impersonate for plugin workload identity federation.
	// Required with identity_token_audience. Requires Vault 1.17+. Available only for Vault Enterprise.
	// Service Account to impersonate for plugin workload identity federation.
	// +kubebuilder:validation:Optional
	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email,omitempty"`
}

// SecretBackendSpec defines the desired state of SecretBackend
type SecretBackendSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretBackendParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretBackendInitParameters `json:"initProvider,omitempty"`
}

// SecretBackendStatus defines the observed state of SecretBackend.
type SecretBackendStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretBackendObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretBackend is the Schema for the SecretBackends API. Creates an GCP secret backend for Vault.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vault}
type SecretBackend struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecretBackendSpec   `json:"spec"`
	Status            SecretBackendStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretBackendList contains a list of SecretBackends
type SecretBackendList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretBackend `json:"items"`
}

// Repository type metadata.
var (
	SecretBackend_Kind             = "SecretBackend"
	SecretBackend_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretBackend_Kind}.String()
	SecretBackend_KindAPIVersion   = SecretBackend_Kind + "." + CRDGroupVersion.String()
	SecretBackend_GroupVersionKind = CRDGroupVersion.WithKind(SecretBackend_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretBackend{}, &SecretBackendList{})
}
